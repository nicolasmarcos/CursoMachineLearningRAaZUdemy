divisao
base_treinamento <- subset(base_escalonada,divisao == TRUE)
base_teste <- subset(base_escalonada,divisao==FALSE)
base_treinamento = subset(base_escalonada,divisao == TRUE)
base_teste = subset(base_escalonada,divisao==FALSE)
View(base_treinamento)
View(base_teste)
setwd("/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR/")
base <- read.csv("credit-data.csv")
base$clientid = NULL
setwd("/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR/")
base <- read.csv("credit-data.csv")
base$clientid = NULL
base[base$age < 0 | is.na(base$age), ] = mean(base$age[base$age > 0],na.rm = TRUE)
# ConversÃ£o de valores da classe
base$default = factor(base$default, levels = c(0,1))
View(base)
base_escalonada[,1:3] <- scale(base_escalonada[,1:3])
base_escalonada <- base
base_escalonada[,1:3] <- scale(base_escalonada[,1:3])
library(caTools)
set.seed(1)
divisao = sample.split(base_escalonada$default, SplitRatio = 0.75)
base_treinamento = subset(base_escalonada,divisao == TRUE)
base_teste = subset(base_escalonada,divisao==FALSE)
library(e1071)
a
classificador = naiveBayes(x = base_treinamento[,-4], y = base_treinamento$default)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[,-4])
print(previsoes)
matriz_confusao = table(base_teste[,4],previsoes)
print(matriz_confusao)
install.packages('caret')
library(caret)
confusionMatrix(matriz_confusao)
setwd("/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR/")
base <- read.csv("credit-data.csv")
base$clientid = NULL
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
divisao
base_treinamento = subset(base,divisao == TRUE)
base_teste = subset(base,divisao==FALSE)
classificador = naiveBayes(x = base_treinamento[,-4], y = base_treinamento$default)
previsoes = predict(classificador, newdata = base_teste[,-4])
matriz_confusao = table(base_teste[,4],previsoes)
confusionMatrix(matriz_confusao)
setwd("/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR/")
base <- read.csv("credit-data.csv")
base$clientid = NULL
base[base$age < 0 | is.na(base$age), ] = mean(base$age[base$age > 0],na.rm = TRUE)
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
divisao
base_treinamento = subset(base,divisao == TRUE)
base_teste = subset(base,divisao==FALSE)
classificador = naiveBayes(x = base_treinamento[,-4], y = base_treinamento$default)
previsoes = predict(classificador, newdata = base_teste[,-4])
matriz_confusao = table(base_teste[,4],previsoes)
confusionMatrix(matriz_confusao)
library(caTools)
library(rpart)
library(rpart.plot)
base = read.csv('credit_data.csv')
base$clientid = NULL
base = read.csv('credit_data.csv')
View(base)
setpwd('/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR')
setwd('/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR')
base = read.csv('credit_data.csv')
base = read.csv('credit-data.csv')
base$clientid = NULL
View(base)
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
View(base)
classificador = rpart(formula = default ~ ., data = base_treinamento)
print(classificador)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4], type = 'class')
library(caret)
matriz_confusao = (base_teste[,4], previsoes)
matriz_confusao = table(base_teste[,4], previsoes)
previsoes = predict(classificador, newdata = base_teste[-4], type = 'class')
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao
previsoes = predict(classificador, newdata = base_teste[-4], type = 'class')
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
base = read.csv('credit-data.csv')
base$clientid = NULL
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
classificador = rpart(formula = default ~ ., data = base_treinamento)
print(classificador)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4], type = 'class')
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
classificador = rpart(formula = default ~ ., data = base_treinamento)
print(classificador)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4], type = 'class')
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
idade_invalida = base[base$age < 0 & !is.na(base$age), ]
View(idade_invalida)
install.packages('randomforest')
install.packages('randomForest')
library(caTools)
library(rpart)
library(rpart.plot)
library(randomForest)
library(caret)
setwd('/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR')
mean(base$age[base$age > 0], na.rm = TRUE)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(caTools)
library(rpart)
library(rpart.plot)
library(randomForest)
library(caret)
setwd('/media/n/6DEFCED45A78BAB8/workspace/Udemy/MachineLearningR')
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento, y = base_treinamento$default, ntree = 3)
print(classificador)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento, y = base_treinamento$default, ntree = 3)
print(classificador)
View(base)
View(base_treinamento)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento, y = base_treinamento$default, ntree = 3)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
classificador = randomForest(x = base_treinamento, y = base_treinamento$default, ntree = 3)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 3)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 3)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 3)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 20)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 20)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 20)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 20)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 100)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 100)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 100)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 100)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 100)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 10000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 10000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 100000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
plot(classificador)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 500)
print(classificador)
plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 500)
print(classificador)
plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 500)
print(classificador)
plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
base = read.csv('credit-data.csv')
base$clientid = NULL
summary(base)
#idade_invalida = base[base$age < 0 & !is.na(base$age), ]
# calcular a m?dia da idade
mean(base$age, na.rm = TRUE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
base[is.na(base$age), ]
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
# Encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
set.seed(1)
classificador = randomForest(x = base_treinamento[-4], y = base_treinamento$default, ntree = 1000)
print(classificador)
plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
